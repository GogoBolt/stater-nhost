import { ChangeEmailHandlerResult, ChangeEmailOptions, ChangeEmailState } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { NestedRefOfValue, RefOrValue } from './helpers';

export interface ChangeEmailComposableResult extends ToRefs<ChangeEmailState> {
    /** Requests the email change. Returns a promise with the current context  */
    changeEmail(email: RefOrValue<string>): Promise<ChangeEmailHandlerResult>;
}
/**
 * Use the composable `useChangeEmail` to change email for the user.
 *
 * @example
 * ```tsx
 * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();
 *
 * watchEffect(() => {
 *   console.log(isLoading.value, needsEmailVerification.value, isError.value, error.value);
 * })
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await changeEmail('new@example.com')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-change-email
 */
export declare const useChangeEmail: (options?: NestedRefOfValue<ChangeEmailOptions | undefined>) => ChangeEmailComposableResult;
//# sourceMappingURL=useChangeEmail.d.ts.map