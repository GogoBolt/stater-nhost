import { SignInIdTokenHandlerResult, SignInIdTokenState, Provider } from '@nhost/nhost-js';
import { RefOrValue } from './helpers';
import { ToRefs } from 'vue';

interface SignInIdTokenResult extends ToRefs<SignInIdTokenState> {
    signInIdToken(provider: RefOrValue<Provider>, idToken: RefOrValue<string>, nonce?: RefOrValue<string>): Promise<SignInIdTokenHandlerResult>;
}
/**
 * Use the composable `useSignInIdToken` to sign in a user using an `idToken`.
 *
 * @example
 * ```ts
 * const { signInIdToken, isLoading, isSuccess, isError, error } = useSignInIdToken()
 *
 * console.log({ isLoading, isSuccess, isError, error });
 *
 * const handleSignInIdToken = async () => {
 *   await signInIdToken({ provider: 'google', idToken: '...' })
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-sign-in-idtoken
 */
export declare const useSignInIdToken: () => SignInIdTokenResult;
export {};
//# sourceMappingURL=useSignInIdToken.d.ts.map