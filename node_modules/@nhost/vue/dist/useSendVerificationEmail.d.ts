import { SendVerificationEmailHandlerResult, SendVerificationEmailOptions, SendVerificationEmailState } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { NestedRefOfValue, RefOrValue } from './helpers';

interface SendVerificationEmailResult extends ToRefs<SendVerificationEmailState> {
    /** Resend the verification email. Returns a promise with the current context */
    sendEmail(email: RefOrValue<string>): Promise<SendVerificationEmailHandlerResult>;
}
/**
 * Use the composable `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.
 *
 * @example
 * ```tsx
 * const { sendEmail, isLoading, isSent, isError, error } =
  useSendVerificationEmail();
 *
 * watchEffect(() => {
 *   console.log(isLoading.value, isSent.value, isError.value, error.value);
 * })
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await sendEmail({
 *     email: 'joe@example.com',
 *   })
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-send-verification-email
 */
export declare const useSendVerificationEmail: (options?: NestedRefOfValue<SendVerificationEmailOptions | undefined>) => SendVerificationEmailResult;
export {};
//# sourceMappingURL=useSendVerificationEmail.d.ts.map