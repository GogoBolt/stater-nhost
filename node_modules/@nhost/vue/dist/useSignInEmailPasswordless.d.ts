import { PasswordlessOptions, SignInEmailPasswordlessHandlerResult, SignInEmailPasswordlessState } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { NestedRefOfValue, RefOrValue } from './helpers';

interface SignInEmailPasswordlessResult extends ToRefs<SignInEmailPasswordlessState> {
    /** Sends a magic link to the given email */
    signInEmailPasswordless(email: RefOrValue<string>): Promise<SignInEmailPasswordlessHandlerResult>;
}
/**
 * Use the composable `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).
 *
 * @example
 * ```tsx
 * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()
 *
 * watchEffect(() => {
 *   console.log(isLoading.value, isSuccess.value, isError.value, error.value);
 * })
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signInEmailPasswordless('joe@example.com');
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-passwordless
 */
export declare const useSignInEmailPasswordless: (options?: NestedRefOfValue<PasswordlessOptions | undefined>) => SignInEmailPasswordlessResult;
export {};
//# sourceMappingURL=useSignInEmailPasswordless.d.ts.map