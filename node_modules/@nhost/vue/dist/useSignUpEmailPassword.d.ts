import { SignUpEmailPasswordHandlerResult, SignUpEmailPasswordState, SignUpOptions } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { NestedRefOfValue, RefOrValue } from './helpers';

interface SignUpEmailPasswordResult extends ToRefs<SignUpEmailPasswordState> {
    /** Used for a new user to sign up. Returns a promise with the current context */
    signUpEmailPassword(email: RefOrValue<string>, password: RefOrValue<string>, options?: NestedRefOfValue<SignUpOptions | undefined>): Promise<SignUpEmailPasswordHandlerResult>;
}
/**
 * Use the composable `useSignUpEmailPassword` to sign up a user using email and password.
 *
 * @example
 * ```tsx
 * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()
 *
 * watchEffect(() => {
 *   console.log(needsEmailVerification.value, isLoading.value, isSuccess.value, isError.value, error.value);
 * })
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signUpEmailPassword('joe@example.com','secret-password')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-sign-up-email-password
 */
export declare const useSignUpEmailPassword: (options?: NestedRefOfValue<SignUpOptions | undefined>) => SignUpEmailPasswordResult;
export {};
//# sourceMappingURL=useSignUpEmailPassword.d.ts.map