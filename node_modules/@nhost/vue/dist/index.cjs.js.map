{"version":3,"file":"index.cjs.js","sources":["../src/useNhostClient.ts","../src/client.ts","../src/useAuthInterpreter.ts","../src/useAccessToken.ts","../src/useAuthenticated.ts","../src/useAuthenticationStatus.ts","../src/helpers.ts","../src/useChangeEmail.ts","../src/useChangePassword.ts","../src/useConfigMfa.ts","../src/useDecodedAccessToken.ts","../src/useFileUpload.ts","../src/useHasuraClaims.ts","../src/useHasuraClaim.ts","../src/useMultipleFilesUpload.ts","../src/useProviderLink.ts","../src/useResetPassword.ts","../src/useSendVerificationEmail.ts","../src/useError.ts","../src/useSignInAnonymous.ts","../src/useSignInEmailPassword.ts","../src/useSignInEmailPasswordless.ts","../src/useSignInPAT.ts","../src/useSignInSmsPasswordless.ts","../src/useSignOut.ts","../src/useUserData.ts","../src/useSignUpEmailPassword.ts","../src/useUserAvatarUrl.ts","../src/useUserDefaultRole.ts","../src/useUserDisplayName.ts","../src/useUserEmail.ts","../src/useUserId.ts","../src/useUserIsAnonymous.ts","../src/useUserLocale.ts","../src/useUserRoles.ts","../src/useElevateSecurityKeyEmail.ts","../src/useSignUpEmailSecurityKey.ts","../src/useSignInEmailSecurityKey.ts","../src/useAddSecurityKey.ts","../src/useSignInEmailOTP.ts","../src/useSignInIdToken.ts","../src/useLinkIdToken.ts","../src/useSignInSecurityKey.ts"],"sourcesContent":["import { getCurrentInstance, inject } from 'vue'\n\nimport { NhostClient } from './client'\n\nexport const DefaultNhostClient = Symbol('default-nhost-client')\n\ntype NullableNhostClient = NhostClient | null\nlet currentNhostClient: NullableNhostClient\n\ninterface ResolveClient {\n  (): NullableNhostClient\n}\n\ninterface UseNhostClientReturn {\n  resolveNhostClient: ResolveClient\n  readonly nhost: NhostClient\n}\n\n/**\n * Use the composable `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const { nhost } = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-nhost-client\n */\nexport function useNhostClient(): UseNhostClientReturn {\n  let resolveImpl: ResolveClient\n\n  // Save current client in current closure scope\n  const savedCurrentClient = currentNhostClient\n\n  if (!getCurrentInstance()) {\n    resolveImpl = () => savedCurrentClient\n  } else {\n    const providedNhostClient: NhostClient | null = inject(DefaultNhostClient, null)\n\n    resolveImpl = () => {\n      if (savedCurrentClient) {\n        return savedCurrentClient\n      } else {\n        return providedNhostClient\n      }\n    }\n  }\n\n  function resolveNhostClient() {\n    const client = resolveImpl()\n    if (!client) {\n      throw new Error(\n        `No Nhost client found. Use provideNhostClient() if you are outside of a component setup.`\n      )\n    }\n    return client\n  }\n\n  return {\n    resolveNhostClient,\n    get nhost() {\n      return resolveNhostClient()\n    }\n  }\n}\n","import {\n  NhostAuthConstructorParams,\n  NhostClient as VanillaClient,\n  removeParameterFromWindow,\n  ServiceUrls,\n  Subdomain\n} from '@nhost/nhost-js'\nimport { App, warn } from 'vue'\nimport { DefaultNhostClient } from './useNhostClient'\n\nexport type { ErrorPayload, NhostSession, Subdomain, User } from '@nhost/nhost-js'\n\nexport interface NhostVueClientConstructorParams\n  extends Partial<Subdomain>,\n    Partial<ServiceUrls>,\n    Omit<NhostAuthConstructorParams, 'url' | 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaClient {\n  private autoSignIn: boolean\n  constructor(params: NhostVueClientConstructorParams) {\n    super({ ...params, start: true })\n    this.autoSignIn = params.autoSignIn ?? true\n  }\n\n  /**\n   * @internal\n   * This method transforms the NhostClient class into a Vue plugin\n   */\n  install(app: App) {\n    const autoSignIn = this.autoSignIn\n    app.provide(DefaultNhostClient, this)\n    // * Remove the refreshToken & type from the hash when using Vue Router\n    if (autoSignIn) {\n      const router = app.config.globalProperties.$router\n      if (!router) {\n        // * Vue-router is not set. Do nothing.\n        return\n      }\n      if (router.options.history.base) {\n        warn(\n          '[Nhost]: Vue-router is configured with a history Hash Mode. Refresh tokens will not be removed from the hash.'\n        )\n        return\n      }\n      router.afterEach(() => {\n        removeParameterFromWindow('refreshToken')\n        removeParameterFromWindow('type')\n      })\n    }\n  }\n}\n","import { AuthMachine } from '@nhost/nhost-js'\nimport { computed, Ref } from 'vue'\nimport { InterpreterFrom } from 'xstate'\nimport { useNhostClient } from './useNhostClient'\n\n/** @internal */\nexport const useAuthInterpreter = (): Ref<InterpreterFrom<AuthMachine>> => {\n  const { nhost } = useNhostClient()\n\n  return computed(() => {\n    const interpreter = nhost.auth.client.interpreter\n    if (!interpreter) throw Error('No interpreter')\n    return interpreter\n  })\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-access-token\n */\nexport const useAccessToken = (): Ref<string | null> => {\n  const service = useAuthInterpreter()\n  return useSelector(service.value, (state) => state.context.accessToken.value)\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-access-token\n */\nexport const useAuthenticated = (): Ref<boolean> => {\n  const service = useAuthInterpreter()\n  return useSelector(service.value, (state) => state.matches({ authentication: 'signedIn' }))\n}\n","import { ErrorPayload } from '@nhost/nhost-js'\nimport { toRefs } from '@vueuse/core'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = (): ToRefs<{\n  isAuthenticated: boolean\n  isLoading: boolean\n  error: ErrorPayload | null\n  isError: boolean\n  connectionAttempts: number\n}> => {\n  const service = useAuthInterpreter()\n  return toRefs(\n    useSelector(\n      service.value,\n      (state) => ({\n        isAuthenticated: state.matches({ authentication: 'signedIn' }),\n        isLoading: state.hasTag('loading'),\n        error: state.context.errors.authentication || null,\n        isError: state.matches({ authentication: { signedOut: 'failed' } }),\n        connectionAttempts: state.context.importTokenAttempts\n      }),\n      (a, b) =>\n        a.isAuthenticated === b.isAuthenticated &&\n        a.isLoading === b.isLoading &&\n        a.connectionAttempts === b.connectionAttempts\n    )\n  )\n}\n","import { Ref, unref } from 'vue'\n\nexport type RefOrValue<T> = T | Ref<T>\n\nexport type NestedRefOfValue<T> = RefOrValue<{\n  [key in keyof T]: T[key] extends RefOrValue<infer Type>\n    ? NestedRefOfValue<Type>\n    : T[key] extends RefOrValue<infer Type>\n    ? Type\n    : T[key] extends object\n    ? NestedRefOfValue<T[key]>\n    : T[key]\n}>\n\nexport const nestedUnref = <T>(input: NestedRefOfValue<T>): T => {\n  const result: NestedRefOfValue<T> = unref(input)\n\n  if (Array.isArray(result)) {\n    // If the result is an array, recursively process each element.\n    return result.map((value) => nestedUnref(value as NestedRefOfValue<unknown>)) as T\n  } else if (result && typeof result === 'object') {\n    // If the result is an object, recursively process its properties.\n    return Object.entries(result).reduce(\n      (aggr, [key, value]) => ({ ...aggr, [key]: nestedUnref(value as NestedRefOfValue<unknown>) }),\n      {} as T\n    )\n  } else {\n    // For non-object and non-array values, return the result as is.\n    return result\n  }\n}\n","import {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface ChangeEmailComposableResult extends ToRefs<ChangeEmailState> {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail(email: RefOrValue<string>): Promise<ChangeEmailHandlerResult>\n}\n\n/**\n * Use the composable `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * watchEffect(() => {\n *   console.log(isLoading.value, needsEmailVerification.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail('new@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-change-email\n */\nexport const useChangeEmail = (\n  options?: NestedRefOfValue<ChangeEmailOptions | undefined>\n): ChangeEmailComposableResult => {\n  const { nhost } = useNhostClient()\n\n  const service = useInterpret(createChangeEmailMachine(nhost.auth.client))\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail = (email: string) =>\n    changeEmailPromise(service, unref(email), nestedUnref(options))\n\n  return { changeEmail, isLoading, error, isError, needsEmailVerification }\n}\n","import {\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  ChangePasswordState,\n  createChangePasswordMachine\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface ChangePasswordComposableResult extends ToRefs<ChangePasswordState> {\n  changePassword(password: RefOrValue<string>): Promise<ChangePasswordHandlerResult>\n}\n\n/**\n * Use the composable `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * watchEffect(() => {\n *   console.log(isLoading.value, isSuccess.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-change-password\n */\nexport const useChangePassword = (): ChangePasswordComposableResult => {\n  const { nhost } = useNhostClient()\n\n  const service = useInterpret(createChangePasswordMachine(nhost.auth.client))\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSuccess = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changePassword = (password: RefOrValue<string>) =>\n    changePasswordPromise(service, unref(password))\n\n  return { changePassword, isLoading, error, isError, isSuccess }\n}\n","import {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface ConfigMfaComposableState\n  extends ToRefs<ActivateMfaState>,\n    ToRefs<GenerateQrCodeState> {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n}\n\n/**\n * @internal\n * TODO documentation when available in Nhost Cloud - see changelog\n * TODO use a common reactive 'result' state - see for instance useChangeEmail\n * TODO use the promise action\n * @returns\n */\nexport const useConfigMfa = (): ConfigMfaComposableState => {\n  const { nhost } = useNhostClient()\n\n  const service = useInterpret(createEnableMfaMachine(nhost.auth.client))\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: RefOrValue<string>) => activateMfaPromise(service, unref(code))\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isError,\n    error\n  }\n}\n","import { JWTClaims } from '@nhost/nhost-js'\nimport { jwtDecode } from 'jwt-decode'\nimport { computed, ComputedRef } from 'vue'\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the composable `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-decoded-access-token\n */\nexport const useDecodedAccessToken = (): ComputedRef<JWTClaims | null> => {\n  const jwt = useAccessToken()\n  return computed(() => (jwt.value ? jwtDecode<JWTClaims>(jwt.value) : null))\n}\n","import {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { ToRefs } from 'vue'\nimport { InterpreterFrom } from 'xstate'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadComposableResult extends ToRefs<FileUploadState> {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the composable `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n *\n * @example\n * ```vue\n * <!-- Parent component or page -->\n *\n * <script lang=\"ts\" setup>\n * const { files } = useMultipleFilesUpload()\n * <script lang=\"ts\" setup>\n *\n * <template>\n *  <div v-for=\"(file, index) of files\" :key=\"index\">\n *    <FileUploadItem :file=\"file\" />\n *  </div>\n * </template>\n *\n *\n * <!-- FileUploadItem component -->\n *\n * <script lang=\"ts\" setup>\n * import { FileItemRef } from '@nhost/nhost-js'\n * import { useFileUploadItem } from '@nhost/vue'\n *\n * const { file } = defineProps<{ file: FileItemRef }>()\n *\n * const { name, progress } = useFileUploadItem(file)\n * </script>\n *\n * <template>\n * <div>\n *  <span>{{ name }}</span>\n *    <v-progress-linear v-model=\"progress\">\n *      {{ progress }}\n *    </v-progress-linear>\n *  </div>\n * </template>\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadComposableResult => {\n  const { nhost } = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId.value\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(\n      {\n        url: nhost.storage.url,\n        accessToken: nhost.auth.getAccessToken(),\n        adminSecret: nhost.adminSecret,\n        ...params\n      },\n      ref\n    )\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the composable `useFileUpload` to upload a file.\n *\n * @example\n * ```ts\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-file-upload\n */\nexport const useFileUpload = (): FileUploadComposableResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","import { JWTHasuraClaims } from '@nhost/nhost-js'\nimport { computed, ComputedRef } from 'vue'\n\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the composable `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-hasura-claims\n */\nexport const useHasuraClaims = (): ComputedRef<JWTHasuraClaims | null> => {\n  const claims = useDecodedAccessToken()\n  return computed(() => claims.value?.['https://hasura.io/jwt/claims'] || null)\n}\n","import { computed, ComputedRef, unref } from 'vue'\n\nimport { RefOrValue } from './helpers'\nimport { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the composable `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-hasura-claim\n */\nexport const useHasuraClaim = (name: RefOrValue<string>): ComputedRef<string | string[] | null> => {\n  const hasuraClaims = useHasuraClaims()\n  return computed(() => {\n    const unrefName = unref(name)\n    return (\n      hasuraClaims.value?.[\n        unrefName.startsWith('x-hasura-') ? unrefName : `x-hasura-${unrefName}`\n      ] || null\n    )\n  })\n}\n","import {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { Ref, ref, ToRefs } from 'vue'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesUploadComposableResult extends ToRefs<MultipleFilesUploadState> {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the composable `useMultipleFilesUpload` to upload multiple files.\n *\n * @example\n * ```ts\n * const {\n *   add,\n *   upload\n * } = useMultipleFilesUpload()\n *\n * const addFiles = async (files) => {\n *   add({files})\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault()\n *   await upload()\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesUploadComposableResult => {\n  const { nhost } = useNhostClient()\n  const errors: Ref<FileItemRef[]> = ref([])\n\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      errors.value = state.context.files.filter((ref) => ref.getSnapshot()?.context.error)\n    } else if (\n      (state.matches('uploaded') || state.event.type === 'CLEAR') &&\n      errors.value.length > 0\n    ) {\n      errors.value = []\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(\n      {\n        url: nhost.storage.url,\n        accessToken: nhost.auth.getAccessToken(),\n        adminSecret: nhost.adminSecret,\n        ...params\n      },\n      service\n    )\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import {\n  encodeQueryParameters,\n  Provider,\n  ProviderOptions,\n  rewriteRedirectTo\n} from '@nhost/nhost-js'\nimport { reactive } from 'vue'\nimport { NestedRefOfValue, nestedUnref } from './helpers'\nimport { useAccessToken } from './useAccessToken'\nimport { useNhostClient } from './useNhostClient'\n\n/**\n *  Use the composable `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n *\n *  Pass in the `connect` option to connect the user's account to the OAuth provider when different emails are used.\n *\n * ```js\n * const providerLink = useProviderLink({ connect: true });\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/vue';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (\n  options?: NestedRefOfValue<ProviderOptions | undefined>\n): Record<Provider, string> => {\n  const { nhost } = useNhostClient()\n  const accessToken = useAccessToken()\n\n  return reactive(\n    new Proxy({} as Record<Provider, string>, {\n      get(_, provider: string) {\n        const optionsValue = nestedUnref(options)\n\n        const connectOptions = optionsValue?.connect ? { connect: accessToken.value } : {}\n\n        return encodeQueryParameters(\n          `${nhost.auth.client.backendUrl}/signin/provider/${provider}`,\n          rewriteRedirectTo(nhost.auth.client.clientUrl, {\n            ...optionsValue,\n            ...connectOptions\n          } as any)\n        )\n      }\n    })\n  )\n}\n","import {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordResult extends ToRefs<ResetPasswordState> {\n  resetPassword: (email: RefOrValue<string>) => Promise<ResetPasswordHandlerResult>\n}\n\n/**\n * Use the composable `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the composable `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword({\n *   redirectTo: 'http://localhost:3000/settings/change-password'\n * });\n *\n * watchEffect(() => {\n *   console.log(isLoading.value, isSent.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-reset-password\n */\nexport const useResetPassword = (\n  options?: NestedRefOfValue<ResetPasswordOptions | undefined>\n): ResetPasswordResult => {\n  const { nhost } = useNhostClient()\n  const service = useInterpret(createResetPasswordMachine(nhost.auth.client))\n\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const error = useSelector(service, (state) => state.context.error)\n\n  const resetPassword = (email: RefOrValue<string>) =>\n    resetPasswordPromise(service, unref(email), nestedUnref(options))\n\n  return { resetPassword, isLoading, isError, isSent, error }\n}\n","import {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/vue'\nimport { reactive, ToRefs, toRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailResult extends ToRefs<SendVerificationEmailState> {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail(email: RefOrValue<string>): Promise<SendVerificationEmailHandlerResult>\n}\n\n/**\n * Use the composable `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * watchEffect(() => {\n *   console.log(isLoading.value, isSent.value, isError.value, error.value);\n * })\n * \n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-send-verification-email\n */\nexport const useSendVerificationEmail = (\n  options?: NestedRefOfValue<SendVerificationEmailOptions | undefined>\n): SendVerificationEmailResult => {\n  const { nhost } = useNhostClient()\n  const service = useInterpret(createSendVerificationEmailMachine(nhost.auth.client))\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const result = reactive<SendVerificationEmailHandlerResult>({\n    isError: false,\n    error: null,\n    isSent: false\n  })\n\n  const sendEmail = (email: RefOrValue<string>) =>\n    sendVerificationEmailPromise(service, unref(email), nestedUnref(options))\n\n  return { sendEmail, isLoading, ...toRefs(result) }\n}\n","import { AuthErrorPayload, StateErrorTypes } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/** @internal */\nexport const useError = (type: StateErrorTypes): Ref<AuthErrorPayload | null> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.errors[type] || null,\n    (a, b) => a?.error === b?.error\n  )\n}\n","import { signInAnonymousPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { useAuthenticated } from './useAuthenticated'\nimport { useAuthInterpreter } from './useAuthInterpreter'\nimport { useError } from './useError'\n\n/**\n * Use the composable `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * watchEffect(() => {\n *   console.log(isLoading.value, isSuccess.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service.value)\n\n  const error = useError('authentication')\n\n  const isLoading = useSelector(service.value, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n\n  const isSuccess = useAuthenticated()\n\n  const isError = useSelector(service.value, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n\n  return { signInAnonymous, isLoading, isSuccess, isError, error }\n}\n","import {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  SignInMfaTotpHandlerResult,\n  signInMfaTotpPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useAuthenticated } from './useAuthenticated'\nimport { useAuthInterpreter } from './useAuthInterpreter'\nimport { useError } from './useError'\n\ninterface SignInEmailPasswordResult extends ToRefs<SignInEmailPasswordState> {\n  signInEmailPassword(\n    email: RefOrValue<string>,\n    password: RefOrValue<string>\n  ): Promise<SignInEmailPasswordHandlerResult>\n  sendMfaOtp(otp: RefOrValue<string>): Promise<SignInMfaTotpHandlerResult>\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the composable `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * watchEffect(() => {\n *   console.log(needsEmailVerification.value, isLoading.value, isSuccess.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-password\n */\nexport const useSignInEmailPassword = (): SignInEmailPasswordResult => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword = (email: RefOrValue<string>, password: RefOrValue<string>) =>\n    signInEmailPasswordPromise(service.value, unref(email), unref(password))\n\n  const sendMfaOtp = (otp: RefOrValue<string>) => signInMfaTotpPromise(service.value, unref(otp))\n\n  const user = useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service.value, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  const error = useError('authentication')\n\n  const isSuccess = useAuthenticated()\n\n  const isLoading = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n\n  const needsEmailVerification = useSelector(\n    service.value,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service.value, (state) => state.context.mfa)\n  const needsMfaOtp = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { signedOut: 'needsMfa' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  signInEmailPasswordlessPromise,\n  SignInEmailPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\nimport { useError } from './useError'\n\ninterface SignInEmailPasswordlessResult extends ToRefs<SignInEmailPasswordlessState> {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless(email: RefOrValue<string>): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\n/**\n * Use the composable `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * watchEffect(() => {\n *   console.log(isLoading.value, isSuccess.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-passwordless\n */\nexport const useSignInEmailPasswordless = (\n  options?: NestedRefOfValue<PasswordlessOptions | undefined>\n): SignInEmailPasswordlessResult => {\n  const service = useAuthInterpreter()\n  const signInEmailPasswordless = (email: RefOrValue<string>) =>\n    signInEmailPasswordlessPromise(service.value, unref(email), nestedUnref(options))\n\n  const error = useError('registration')\n\n  const isLoading = useSelector(service.value, (state) =>\n    state.matches('registration.passwordlessEmail')\n  )\n\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.failed')\n  )\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import { SignInPATHandlerResult, SignInPATState, signInPATPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInPATResult extends ToRefs<SignInPATState> {\n  signInPAT(pat: RefOrValue<string>): Promise<SignInPATHandlerResult>\n}\n\n/**\n * Use the composable `useSignInPAT` to sign in a user using a personal access token.\n *\n * @example\n * ```tsx\n * const { signInPAT, isLoading, isSuccess, isError, error } = useSignInPAT()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInPAT('8c5402d1-b05d-4825-a3ae-52d26402b89b')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-pat\n */\nexport const useSignInPAT = (): SignInPATResult => {\n  const service = useAuthInterpreter()\n  const signInPAT = (pat: RefOrValue<string>) => signInPATPromise(service.value, unref(pat))\n\n  const user = useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service.value, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({ authentication: 'signedIn' })\n  )\n\n  const isLoading = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInPAT,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  signInSmsPasswordlessOtpPromise,\n  signInSmsPasswordlessPromise,\n  SignInSmsPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ref, ToRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (\n    phoneNumber: RefOrValue<string>,\n    options?: NestedRefOfValue<PasswordlessOptions | undefined>\n  ): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: RefOrValue<string>): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (\n    phoneNumber: RefOrValue<string>,\n    code: RefOrValue<string>\n  ): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessComposableResult extends ToRefs<SignInSmsPasswordlessState> {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the composable `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: NestedRefOfValue<PasswordlessOptions | undefined>\n): SignInSmsPasswordlessComposableResult {\n  const service = useAuthInterpreter()\n  const _phoneNumber = ref('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: RefOrValue<string>,\n    valueOptions = stateOptions\n  ) => {\n    _phoneNumber.value = unref(phoneNumber)\n    return signInSmsPasswordlessPromise(\n      service.value,\n      unref(phoneNumber),\n      nestedUnref(valueOptions)\n    )\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: Array<RefOrValue<string>>) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service.value, unref(phoneNumber), unref(code))\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service.value, unref(_phoneNumber), unref(code))\n  }\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service.value,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service.value, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.failed')\n  )\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\nimport { useError } from './useError'\n\n/**\n * Use the composable `useSignOut` to sign out the user.\n *\n * @example\n * ```jsx\n * import { useSignOut } from '@nhost/vue'\n *\n * const { signOut, isSuccess } = useSignOut()\n *\n * const handleSignOut = async (e) => {\n *   e.preventDefault()\n *   await signOut()\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-out\n */\nexport const useSignOut = () => {\n  const service = useAuthInterpreter()\n  const signOut = (\n    /** Sign out on all devices */\n    all?: RefOrValue<boolean | undefined>\n  ) => signOutPromise(service.value, typeof unref(all) === 'boolean' ? unref(all) : false)\n\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({ authentication: { signedOut: 'success' } })\n  )\n\n  const error = useError('signout')\n\n  return { signOut, isSuccess, error }\n}\n","import { User } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-data\n */\nexport const useUserData = (): Ref<User | null> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => JSON.stringify(a) === JSON.stringify(b)\n  )\n}\n","import {\n  SignUpEmailPasswordHandlerResult,\n  signUpEmailPasswordPromise,\n  SignUpEmailPasswordState,\n  SignUpOptions\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useAccessToken } from './useAccessToken'\nimport { useAuthInterpreter } from './useAuthInterpreter'\nimport { useError } from './useError'\nimport { useUserData } from './useUserData'\n\ninterface SignUpEmailPasswordResult extends ToRefs<SignUpEmailPasswordState> {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword(\n    email: RefOrValue<string>,\n    password: RefOrValue<string>,\n    options?: NestedRefOfValue<SignUpOptions | undefined>\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\n/**\n * Use the composable `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * watchEffect(() => {\n *   console.log(needsEmailVerification.value, isLoading.value, isSuccess.value, isError.value, error.value);\n * })\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword = (\n  options?: NestedRefOfValue<SignUpOptions | undefined>\n): SignUpEmailPasswordResult => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.failed')\n  )\n\n  const error = useError('registration')\n\n  const isLoading = useSelector(service.value, (state) =>\n    state.matches('registration.emailPassword')\n  )\n\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const needsEmailVerification = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const accessToken = useAccessToken()\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  const user = useUserData()\n  const signUpEmailPassword = (\n    email: RefOrValue<string>,\n    password: RefOrValue<string>,\n    handlerOptions: NestedRefOfValue<SignUpOptions | undefined>\n  ) =>\n    signUpEmailPasswordPromise(service.value, unref(email), unref(password), {\n      ...nestedUnref(options),\n      ...nestedUnref(handlerOptions)\n    })\n\n  return {\n    signUpEmailPassword,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    needsEmailVerification,\n    accessToken,\n    refreshToken,\n    user\n  }\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-avatar-url\n */\nexport const useUserAvatarUrl = (): Ref<string | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-default-role\n */\nexport const useUserDefaultRole = (): Ref<string | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-display-name\n */\nexport const useUserDisplayName = (): Ref<string | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composbale `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-email\n */\nexport const useUserEmail = (): Ref<string | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-id\n */\nexport const useUserId = (): Ref<string | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = (): Ref<boolean | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-locale\n */\nexport const useUserLocale = (): Ref<string | undefined> => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service.value,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/vue'\nimport { Ref } from 'vue'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the composable `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-user-roles\n */\nexport const useUserRoles = (): Ref<string[]> => {\n  const service = useAuthInterpreter()\n  return useSelector(service.value, (state) => {\n    if (!state.matches('authentication.signedIn')) {\n      return []\n    }\n    return state.context.user?.roles || []\n  })\n}\n","import {\n  elevateEmailSecurityKeyPromise,\n  ElevateWithSecurityKeyHandlerResult\n} from '@nhost/nhost-js'\nimport { computed, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useHasuraClaims } from './useHasuraClaims'\nimport { useNhostClient } from './useNhostClient'\nimport { useUserData } from './useUserData'\n\ninterface ElevateWithSecurityKeyHandler {\n  (email: RefOrValue<string>): Promise<ElevateWithSecurityKeyHandlerResult>\n}\n\ninterface ElevateWithSecurityKeyResult {\n  elevateEmailSecurityKey: ElevateWithSecurityKeyHandler\n  elevated: RefOrValue<boolean>\n}\n\n/**\n * Use the composable `useElevateSecurityKeyEmail` to elevate the user auth permission in order to perform sensitive operations\n *\n * @example\n * ```ts\n * const { elevateEmailSecurityKey, elevated } = useElevateSecurityKeyEmail()\n *\n * watchEffect(() => {\n *   console.log(elevated);\n * })\n *\n * await elevateEmailSecurityKey('joe@example.com')\n *\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-password\n */\nexport const useElevateSecurityKeyEmail = (): ElevateWithSecurityKeyResult => {\n  const user = useUserData()\n  const claims = useHasuraClaims()\n  const { nhost } = useNhostClient()\n\n  const hasElevatedClaim = computed(() =>\n    user.value ? claims.value?.['x-hasura-auth-elevated'] === user.value?.id : false\n  )\n\n  const elevated = computed(() => !!hasElevatedClaim.value)\n\n  const elevateEmailSecurityKey: ElevateWithSecurityKeyHandler = (email: RefOrValue<string>) =>\n    elevateEmailSecurityKeyPromise(nhost.auth.client, unref(email))\n\n  return {\n    elevateEmailSecurityKey,\n    elevated\n  }\n}\n","import {\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (\n    email: RefOrValue<string>,\n    options?: RefOrValue<SignUpSecurityKeyOptions>\n  ): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends ToRefs<SignUpSecurityKeyState> {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyResult {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the composable `useSignUpEmailSecurityKey` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```ts\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKey: SignUpSecurityKeyResult = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service.value, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service.value, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (email, options = hookOptions) =>\n    signUpEmailSecurityKeyPromise(service.value, unref(email), unref(options))\n\n  const user = useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service.value, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: RefOrValue<string>): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends ToRefs<SignInSecurityKeyPasswordlessState> {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessResult {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the composable `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessResult = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (\n    email: RefOrValue<string>\n  ) => signInEmailSecurityKeyPromise(service.value, unref(email))\n\n  const user = useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service.value, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n\n  const needsEmailVerification = useSelector(\n    service.value,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import {\n  ActionErrorState,\n  ActionLoadingState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/nhost-js'\nimport { ToRefs, ref, computed } from 'vue'\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyComposableResult\n  extends ToRefs<ActionErrorState>,\n    ToRefs<ActionSuccessState>,\n    ToRefs<ActionLoadingState> {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\n/**\n * Use the composable `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-add-security-key\n */\nexport const useAddSecurityKey = (): AddSecuritKeyComposableResult => {\n  const { nhost } = useNhostClient()\n  const error = ref<ErrorPayload | null>(null)\n  const isSuccess = computed(() => !error)\n  const isError = computed(() => !!error)\n  const isLoading = ref<boolean>(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    isLoading.value = true\n\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n\n    const { error: addSecurityKeyError } = result\n\n    if (error) {\n      error.value = addSecurityKeyError\n    }\n\n    isLoading.value = false\n\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import {\n  EmailOTPOptions,\n  SignInEmailOTPHandlerResult,\n  signInEmailOTPPromise,\n  SignInEmailOTPState,\n  VerifyEmailOTPHandlerResult,\n  verifyEmailOTPPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs, unref } from 'vue'\nimport { NestedRefOfValue, nestedUnref, RefOrValue } from './helpers'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInEmailOTPHandler {\n  (\n    email: RefOrValue<string>,\n    options?: NestedRefOfValue<EmailOTPOptions | undefined>\n  ): Promise<SignInEmailOTPHandlerResult>\n}\n\nexport interface VerifyEmailOTPHandler {\n  (email: RefOrValue<string>, code: RefOrValue<string>): Promise<VerifyEmailOTPHandlerResult>\n}\n\nexport interface SignEmailOTPComposableResult extends ToRefs<SignInEmailOTPState> {\n  signInEmailOTP: SignInEmailOTPHandler\n  verifyEmailOTP: VerifyEmailOTPHandler\n}\n\n/**\n * Use the `useSignInEmailOTP` composable to sign in a user with a one-time password sent via email.\n *\n * ## Usage\n *\n * 1. Call the `signInEmailOTP` function with the user's email to send a one-time password (OTP) to that email address.\n * 2. The state `needsOtp` will be `true`, indicating that an OTP is required.\n * 3. Once the user receives the OTP via email, call the `verifyEmailOTP` function with the email and the received OTP.\n * 4. On successful verification, the user is authenticated, and `isSuccess` becomes `true`.\n *\n * Any errors during the sign-in or verification process are tracked using `isError` and `error`. While the `signInEmailOTP` and `verifyEmailOTP` actions are in progress, `isLoading` is `true`.\n *\n * ## Example\n * ```ts\n * const {\n *   signInEmailOTP,\n *   verifyEmailOTP,\n *   error\n * } = useSignInEmailOTP()\n *\n * const requestOtp = async (e: Event) => {\n *   e.preventDefault()\n *   await signInEmailOTP(email.value)\n * }\n *\n * const confirmOtp = async (e: Event) => {\n *   e.preventDefault()\n *   await verifyEmailOTP(email.value, otp.value)\n * }\n *\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-otp\n */\nexport function useSignInEmailOTP(\n  options?: NestedRefOfValue<EmailOTPOptions | undefined>\n): SignEmailOTPComposableResult {\n  const service = useAuthInterpreter()\n\n  const signInEmailOTP: SignInEmailOTPHandler = (\n    email: RefOrValue<string>,\n    overrideOptions = options\n  ) => {\n    return signInEmailOTPPromise(service.value, unref(email), nestedUnref(overrideOptions))\n  }\n\n  const verifyEmailOTP: VerifyEmailOTPHandler = async (\n    email: RefOrValue<string>,\n    otp: RefOrValue<string>\n  ) => {\n    return verifyEmailOTPPromise(service.value, unref(email), unref(otp))\n  }\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service.value,\n    (state) =>\n      state.matches('registration.signInEmailOTP') || state.matches('registration.verifyEmailOTP')\n  )\n\n  const isSuccess = useSelector(service.value, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service.value, (state) =>\n    state.matches('registration.incomplete.failed')\n  )\n\n  return { signInEmailOTP, verifyEmailOTP, needsOtp, isLoading, isSuccess, isError, error }\n}\n","import {\n  SignInIdTokenHandlerResult,\n  SignInIdTokenState,\n  signInIdTokenPromise,\n  Provider\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { RefOrValue } from './helpers'\nimport { ToRefs, unref } from 'vue'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInIdTokenResult extends ToRefs<SignInIdTokenState> {\n  signInIdToken(\n    provider: RefOrValue<Provider>,\n    idToken: RefOrValue<string>,\n    nonce?: RefOrValue<string>\n  ): Promise<SignInIdTokenHandlerResult>\n}\n\n/**\n * Use the composable `useSignInIdToken` to sign in a user using an `idToken`.\n *\n * @example\n * ```ts\n * const { signInIdToken, isLoading, isSuccess, isError, error } = useSignInIdToken()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleSignInIdToken = async () => {\n *   await signInIdToken({ provider: 'google', idToken: '...' })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-idtoken\n */\nexport const useSignInIdToken = (): SignInIdTokenResult => {\n  const service = useAuthInterpreter()\n\n  const signInIdToken = (\n    provider: RefOrValue<Provider>,\n    idToken: RefOrValue<string>,\n    nonce?: RefOrValue<string>\n  ) =>\n    signInIdTokenPromise(service.value, {\n      provider: unref(provider),\n      idToken: unref(idToken),\n      nonce: unref(nonce)\n    })\n\n  const user = useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service.value, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({ authentication: 'signedIn' })\n  )\n\n  const isLoading = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { authenticating: 'idToken' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInIdToken,\n    user\n  }\n}\n","import {\n  ActionErrorState,\n  ActionLoadingState,\n  ActionSuccessState,\n  ErrorPayload,\n  LinkIdTokenHandlerParams,\n  LinkIdTokenHandlerResult,\n  linkIdTokenPromise\n} from '@nhost/nhost-js'\nimport { computed, ref, ToRefs } from 'vue'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface LinkIdTokenResult\n  extends ToRefs<ActionErrorState>,\n    ToRefs<ActionSuccessState>,\n    ToRefs<ActionLoadingState> {\n  linkIdToken(params: LinkIdTokenHandlerParams): Promise<LinkIdTokenHandlerResult>\n}\n\n/**\n * Use the hook `useLinkIdToken` to link a user account with the provider's account using an id token\n *\n * @example\n * ```tsx\n * const { linkIdToken, isLoading, isSuccess, isError, error } = useLinkIdToken()\n *\n * const handleLinkIdToken = async () => {\n *   await linkIdToken({\n *      provider: 'google',\n *      idToken: '...',\n *      nonce: '...'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-link-id-token\n */\nexport const useLinkIdToken = (): LinkIdTokenResult => {\n  const { nhost } = useNhostClient()\n  const error = ref<ErrorPayload | null>(null)\n  const isSuccess = computed(() => !error)\n  const isError = computed(() => !!error)\n  const isLoading = ref<boolean>(false)\n\n  const linkIdToken = async ({ provider, idToken, nonce }: LinkIdTokenHandlerParams) => {\n    isLoading.value = true\n\n    const result = await linkIdTokenPromise(nhost.auth.client, {\n      provider,\n      idToken,\n      ...(nonce && { nonce })\n    })\n\n    const { error: linkIdTokenError } = result\n\n    if (error) {\n      error.value = linkIdTokenError\n    }\n\n    isLoading.value = false\n    return result\n  }\n\n  return { linkIdToken, isLoading, isSuccess, isError, error }\n}\n","import {\n  SignInSecurityKeyHandlerResult,\n  signInSecurityKeyPromise,\n  SignInSecurityKeyState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/vue'\nimport { ToRefs } from 'vue'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyHandler {\n  (): Promise<SignInSecurityKeyHandlerResult>\n}\n\nexport interface SignInSecurityKeyHookResult extends ToRefs<SignInSecurityKeyState> {\n  signInSecurityKey: SignInSecurityKeyHandler\n}\n\ninterface SignInSecurityKeyResult {\n  (): SignInSecurityKeyHookResult\n}\n\n/**\n * Use the composable `useSignInSecurityKey` to sign in a user with a security key using the WebAuthn API\n *\n * @example\n * ```tsx\n * const { signInSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInSecurityKey()\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/vue/use-sign-in-security-key\n */\nexport const useSignInSecurityKey: SignInSecurityKeyResult = () => {\n  const service = useAuthInterpreter()\n  const signInSecurityKey: SignInSecurityKeyHandler = () => signInSecurityKeyPromise(service.value)\n\n  const user = useSelector(\n    service.value,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service.value, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service.value, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service.value,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service.value, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n\n  const needsEmailVerification = useSelector(\n    service.value,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service.value,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInSecurityKey,\n    user\n  }\n}\n"],"names":["DefaultNhostClient","currentNhostClient","useNhostClient","resolveImpl","savedCurrentClient","getCurrentInstance","providedNhostClient","inject","resolveNhostClient","client","NhostClient","VanillaClient","params","_a","app","autoSignIn","router","warn","removeParameterFromWindow","useAuthInterpreter","nhost","computed","interpreter","useAccessToken","service","useSelector","state","useAuthenticated","useAuthenticationStatus","toRefs","a","b","nestedUnref","input","result","unref","value","aggr","key","useChangeEmail","options","useInterpret","createChangeEmailMachine","isLoading","error","isError","needsEmailVerification","email","changeEmailPromise","useChangePassword","createChangePasswordMachine","isSuccess","password","changePasswordPromise","useConfigMfa","createEnableMfaMachine","isGenerating","isGenerated","isActivating","isActivated","qrCodeDataUrl","generateQrCodePromise","code","activateMfaPromise","useDecodedAccessToken","jwt","jwtDecode","useFileUploadItem","ref","add","bucketId","upload","uploadFilePromise","cancel","destroy","isUploading","isUploaded","progress","id","name","useFileUpload","createFileUploadMachine","useHasuraClaims","claims","useHasuraClaim","hasuraClaims","unrefName","useMultipleFilesUpload","errors","createMultipleFilesUploadMachine","uploadMultipleFilesPromise","clear","files","useProviderLink","accessToken","reactive","_","provider","optionsValue","connectOptions","encodeQueryParameters","rewriteRedirectTo","useResetPassword","createResetPasswordMachine","isSent","resetPasswordPromise","useSendVerificationEmail","createSendVerificationEmailMachine","sendVerificationEmailPromise","useError","type","useSignInAnonymous","signInAnonymous","signInAnonymousPromise","useSignInEmailPassword","signInEmailPassword","signInEmailPasswordPromise","sendMfaOtp","otp","signInMfaTotpPromise","user","refreshToken","mfa","needsMfaOtp","useSignInEmailPasswordless","signInEmailPasswordless","signInEmailPasswordlessPromise","useSignInPAT","signInPAT","pat","signInPATPromise","useSignInSmsPasswordless","stateOptions","_phoneNumber","signInSmsPasswordless","phoneNumber","valueOptions","signInSmsPasswordlessPromise","sendOtp","args","signInSmsPasswordlessOtpPromise","needsOtp","useSignOut","signOut","all","signOutPromise","useUserData","useSignUpEmailPassword","handlerOptions","signUpEmailPasswordPromise","useUserAvatarUrl","useUserDefaultRole","useUserDisplayName","useUserEmail","useUserId","useUserIsAnonymous","useUserLocale","useUserRoles","useElevateSecurityKeyEmail","hasElevatedClaim","_b","elevated","elevateEmailSecurityKeyPromise","useSignUpEmailSecurityKey","hookOptions","signUpEmailSecurityKey","signUpEmailSecurityKeyPromise","useSignInEmailSecurityKey","signInEmailSecurityKey","signInEmailSecurityKeyPromise","useAddSecurityKey","nickname","addSecurityKeyPromise","addSecurityKeyError","useSignInEmailOTP","signInEmailOTP","overrideOptions","signInEmailOTPPromise","verifyEmailOTP","verifyEmailOTPPromise","useSignInIdToken","signInIdToken","idToken","nonce","signInIdTokenPromise","useLinkIdToken","linkIdTokenPromise","linkIdTokenError","useSignInSecurityKey","signInSecurityKey","signInSecurityKeyPromise"],"mappings":"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"}