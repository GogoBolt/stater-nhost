import { SignUpSecurityKeyOptions, SignUpSecurityKeyState } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { RefOrValue } from './helpers';

type SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>;
interface SignUpSecurityKeyHandler {
    (email: RefOrValue<string>, options?: RefOrValue<SignUpSecurityKeyOptions>): Promise<SignUpSecurityKeyHandlerResult>;
}
export interface SignUpSecurityKeyHookResult extends ToRefs<SignUpSecurityKeyState> {
    /** Used for a new user to sign up with a security key. Returns a promise with the current context */
    signUpEmailSecurityKey: SignUpSecurityKeyHandler;
}
interface SignUpSecurityKeyResult {
    (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult;
}
/**
 * Use the composable `useSignUpEmailSecurityKey` to sign up a user with security key and an email using the WebAuthn API.
 *
 * @example
 * ```ts
 * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKey()
 *
 * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signUpEmailSecurityKey('joe@example.com')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-sign-up-security-key
 */
export declare const useSignUpEmailSecurityKey: SignUpSecurityKeyResult;
export {};
//# sourceMappingURL=useSignUpEmailSecurityKey.d.ts.map