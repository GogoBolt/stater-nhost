import { FileItemRef, FileUploadMachine, FileUploadState, StorageUploadFileParams, UploadFileHandlerResult } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { InterpreterFrom } from 'xstate';

export interface FileUploadComposableResult extends ToRefs<FileUploadState> {
    /**
     * Add the file without uploading it.
     */
    add: (params: StorageUploadFileParams) => void;
    /**
     * Upload the file given as a parameter, or that has been previously added.
     */
    upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>;
    /**
     * Cancel the ongoing upload.
     */
    cancel: () => void;
    /**
     * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.
     */
    destroy: () => void;
}
export type { FileItemRef };
/**
 * Use the composable `useFileUploadItem` to control the file upload of a file in a multiple file upload.
 *
 *
 * @example
 * ```vue
 * <!-- Parent component or page -->
 *
 * <script lang="ts" setup>
 * const { files } = useMultipleFilesUpload()
 * <script lang="ts" setup>
 *
 * <template>
 *  <div v-for="(file, index) of files" :key="index">
 *    <FileUploadItem :file="file" />
 *  </div>
 * </template>
 *
 *
 * <!-- FileUploadItem component -->
 *
 * <script lang="ts" setup>
 * import { FileItemRef } from '@nhost/nhost-js'
 * import { useFileUploadItem } from '@nhost/vue'
 *
 * const { file } = defineProps<{ file: FileItemRef }>()
 *
 * const { name, progress } = useFileUploadItem(file)
 * </script>
 *
 * <template>
 * <div>
 *  <span>{{ name }}</span>
 *    <v-progress-linear v-model="progress">
 *      {{ progress }}
 *    </v-progress-linear>
 *  </div>
 * </template>
 *
 * ```
 */
export declare const useFileUploadItem: (ref: FileItemRef | InterpreterFrom<FileUploadMachine>) => FileUploadComposableResult;
/**
 * Use the composable `useFileUpload` to upload a file.
 *
 * @example
 * ```ts
 * const {  add,
 *  upload,
 *  cancel,
 *  isUploaded,
 *  isUploading,
 *  isError,
 *  progress,
 *  id,
 *  bucketId,
 *  name
 * } = useFileUpload();
 *
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await upload({ file })
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-file-upload
 */
export declare const useFileUpload: () => FileUploadComposableResult;
//# sourceMappingURL=useFileUpload.d.ts.map