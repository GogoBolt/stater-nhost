import { ActionErrorState, ActionLoadingState, ActionSuccessState, AddSecurityKeyHandlerResult } from '@nhost/nhost-js';
import { ToRefs } from 'vue';

interface AddSecurityKeyHandler {
    (
    /** Optional human-readable name of the security key */
    nickname?: string): Promise<AddSecurityKeyHandlerResult>;
}
export interface AddSecuritKeyComposableResult extends ToRefs<ActionErrorState>, ToRefs<ActionSuccessState>, ToRefs<ActionLoadingState> {
    /** Add a security key to the current user with the WebAuthn API */
    add: AddSecurityKeyHandler;
}
/**
 * Use the composable `useAddSecurityKey` to add a WebAuthn security key.
 *
 * @example
 * ```tsx
 * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await add('key nickname')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-add-security-key
 */
export declare const useAddSecurityKey: () => AddSecuritKeyComposableResult;
export {};
//# sourceMappingURL=useAddSecurityKey.d.ts.map