import { SignInEmailPasswordHandlerResult, SignInEmailPasswordState, SignInMfaTotpHandlerResult } from '@nhost/nhost-js';
import { ToRefs } from 'vue';
import { RefOrValue } from './helpers';

interface SignInEmailPasswordResult extends ToRefs<SignInEmailPasswordState> {
    signInEmailPassword(email: RefOrValue<string>, password: RefOrValue<string>): Promise<SignInEmailPasswordHandlerResult>;
    sendMfaOtp(otp: RefOrValue<string>): Promise<SignInMfaTotpHandlerResult>;
}
/**
 * Use the composable `useSignInEmailPassword` to sign in a user using email and password.
 *
 * @example
 * ```tsx
 * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()
 *
 * watchEffect(() => {
 *   console.log(needsEmailVerification.value, isLoading.value, isSuccess.value, isError.value, error.value);
 * })
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signInEmailPassword('joe@example.com','secret-password')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-password
 */
export declare const useSignInEmailPassword: () => SignInEmailPasswordResult;
export {};
//# sourceMappingURL=useSignInEmailPassword.d.ts.map