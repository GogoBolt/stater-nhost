import { Ref } from 'vue';

export type RefOrValue<T> = T | Ref<T>;
export type NestedRefOfValue<T> = RefOrValue<{
    [key in keyof T]: T[key] extends RefOrValue<infer Type> ? NestedRefOfValue<Type> : T[key] extends RefOrValue<infer Type> ? Type : T[key] extends object ? NestedRefOfValue<T[key]> : T[key];
}>;
export declare const nestedUnref: <T>(input: NestedRefOfValue<T>) => T;
//# sourceMappingURL=helpers.d.ts.map