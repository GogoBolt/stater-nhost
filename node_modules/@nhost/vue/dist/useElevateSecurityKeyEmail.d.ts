import { ElevateWithSecurityKeyHandlerResult } from '@nhost/nhost-js';
import { RefOrValue } from './helpers';

interface ElevateWithSecurityKeyHandler {
    (email: RefOrValue<string>): Promise<ElevateWithSecurityKeyHandlerResult>;
}
interface ElevateWithSecurityKeyResult {
    elevateEmailSecurityKey: ElevateWithSecurityKeyHandler;
    elevated: RefOrValue<boolean>;
}
/**
 * Use the composable `useElevateSecurityKeyEmail` to elevate the user auth permission in order to perform sensitive operations
 *
 * @example
 * ```ts
 * const { elevateEmailSecurityKey, elevated } = useElevateSecurityKeyEmail()
 *
 * watchEffect(() => {
 *   console.log(elevated);
 * })
 *
 * await elevateEmailSecurityKey('joe@example.com')
 *
 * ```
 *
 * @docs https://docs.nhost.io/reference/vue/use-sign-in-email-password
 */
export declare const useElevateSecurityKeyEmail: () => ElevateWithSecurityKeyResult;
export {};
//# sourceMappingURL=useElevateSecurityKeyEmail.d.ts.map